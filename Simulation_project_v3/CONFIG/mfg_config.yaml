# MFG模块配置文件
# 平均场博弈均衡求解参数
# 核心思想：融合MFG理论与ABM方法，使用基于个体的蒙特卡洛模拟

# 个体模拟参数
population:
  # 模拟的个体数量（用N个个体代表整个人口）
  n_individuals: 10000

# 努力水平离散化（用于贝尔曼方程中枚举搜索最优解）
effort:
  a_min: 0.0
  a_max: 1.0
  a_points: 11  # 离散化为11个点：[0, 0.1, 0.2, ..., 1.0]

# 核心经济参数
economics:
  # 贴现因子 (未来收益偏好)
  # 【修正2】从0.85降低到0.75，进一步提高数值稳定性
  # 原因：价值函数震荡过大，需要降低未来价值权重
  # 参考：标准宏观模型季度ρ取0.75-0.90
  rho: 0.75
  
  # 努力成本系数
  kappa: 1.0
  
  # 失业收益函数 b(x) = b0（固定失业救济金）
  unemployment_benefit:
    b0: 500.0      # 失业救济金（元/月）
  
  # 就业效用函数 ω(x, σ_i) = 匹配企业的工资W_offer
  # 注：匹配成功后，从企业分布中获取W_offer作为就业收入
  employment_utility:
    # 企业工资分布参数（用于计算期望工资）
    # 假设企业W_offer服从正态分布 N(mean, std)
    mean_wage: 4500.0   # 企业平均工资（元/月）
    std_wage: 1500.0    # 企业工资标准差
  
  # 状态更新系数（研究计划4.3节）
  # 描述个体通过努力a改变状态的动态机制
  # 注：S和D会在计算时动态MinMax标准化到[0,1]，更新后反标准化
  state_update:
    # T_{t+1} = T_t + γ_T*a_t*(T_max - T_t)
    # 其中T_max为个体当期的最大可工作时长（动态计算）
    gamma_T: 0.3   
    
    # W_{t+1} = max(W_min, W_t - γ_W*a_t)
    # 其中W_min为个体当期的最低期望工资（动态计算）
    gamma_W: 0.15  
    
    # S_{t+1} = S_t + γ_S*a_t*(1 - S_t)
    # 其中S_t是MinMax标准化后的值（基于当前人口分布）
    gamma_S: 0.3
    
    # D_{t+1} = D_t + γ_D*a_t*(1 - D_t)
    # 其中D_t是MinMax标准化后的值（基于当前人口分布）
    gamma_D: 0.3
  
  # 外生离职率函数 μ(x, σ_i) = 1/(1+exp(-η'Z))
  # Z包含：截距、T_std、S_std、D_std、W_std、age_std、edu_std、children_std
  # 【重要】所有变量必须先标准化：x_std = (x - mean) / std（群体层面）
  # 校准方法：基于1000个虚拟个体，目标平均离职率5%
  separation_rate:
    eta0: -3.46    # 截距项（已校准）
    eta_T: -0.50   # T_std的系数（工作时间长→稳定）
    eta_S: -0.80   # S_std的系数（技能高→稳定）
    eta_D: -0.50   # D_std的系数（数字素养高→稳定）
    eta_W: 0.05    # W_std的系数（期望工资高→略不稳定）
    eta_age: -0.60 # age_std的系数（年龄大→稳定）
    eta_edu: -0.30 # edu_std的系数（教育高→稳定）
    eta_children: 0.15  # children_std的系数（孩子多→不稳定）
    target_rate: 0.05  # 目标平均离职率（5%）
    # 校准结果：平均5.01%，中位数2.94%，25-75分位[1.40%, 5.89%]

# 市场参数
market:
  # 【修改】使用外生市场紧张度（目标值）
  # 市场紧张度 θ = V/U，表示每个失业者对应多少个岗位
  # 合理范围：0.5-2.0（健康市场），>2.0（劳动力短缺），<0.5（就业困难）
  target_theta: 1.5  # 目标市场紧张度（外生参数）
  
  # 初始化方式
  initialization:
    # 初始时所有个体都处于失业状态
    # 然后运行一次随机匹配（基于匹配函数λ），判断每个人是否就业
    # 从而得到初始的失业/就业分布
    initial_effort: 0.0  # 初始努力水平设为0

# 值迭代算法参数
value_iteration:
  max_iter: 500      # 最大迭代次数
  tol: 1.0e-4        # 收敛阈值

# 均衡求解参数
equilibrium:
  max_outer_iter: 100    # 贝尔曼+KFE交替迭代最大轮数
  
  # 阻尼更新机制（防止价值函数震荡）
  # V_new = damping * V_computed + (1 - damping) * V_old
  # damping越小，更新越平滑，但收敛越慢
  damping_factor: 0.3
  
  # 收敛标准
  convergence:
    # 【修改】使用相对收敛阈值
    # 相对阈值：|ΔV| / (|V| + 1e-10) < epsilon_V
    # 原因：价值函数量级在2万-3万，绝对阈值1e-4过于严格
    epsilon_V: 0.01      # 价值函数相对收敛阈值（1%）
    epsilon_a: 0.01      # 努力水平收敛阈值（绝对值）
    epsilon_u: 0.0001    # 失业率收敛阈值（绝对值）
    use_relative_tol: true  # 对V使用相对阈值，对a和u使用绝对阈值

# 输入输出路径（硬编码）
paths:
  # 输入：匹配函数模型
  match_function_model: "OUTPUT/logistic/match_function_model.pkl"
  
  # 输出目录
  output_dir: "OUTPUT/mfg"

